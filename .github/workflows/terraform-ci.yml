name: Terraform CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
      - dev
  push:
    branches:
      - main

env:
  TERRAFORM_VERSION: 1.5.6
  TFLINT_VERSION: v0.48.0
  AWS_REGION: us-east-1

permissions:
  contents: read
  pull-requests: write
  id-token: write
  actions: write

jobs:

  #------------#

  determine_bump_type:
    name: Determine Version Bump Type
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'dev'
    steps:
      - name: Checkout correct branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Set bump type based on source branch
        run: |
          head_branch="${{ github.head_ref }}"
          bump_type="patch"
          if [[ "$head_branch" == *"major"* ]]; then
            bump_type="major"
          elif [[ "$head_branch" == *"minor"* ]]; then
            bump_type="minor"
          fi
          echo "$bump_type" > .version-bump
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .version-bump
          git commit -m "ci: set version bump type [$bump_type]"
          git push origin HEAD:${{ github.head_ref }}

  #-------------#

  lint:
    name: Lint (terraform fmt, validate, tflint)
    runs-on: ubuntu-latest
    outputs:
      lint_status: ${{ steps.lint_check.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v1
        with:
          version: ${{ env.TFLINT_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infrastructure

      - name: Run tflint
        id: tflint_check
        run: |
          set -e
          tflint --init
          tflint || exit 1
        working-directory: infrastructure

      - name: Comment tflint results on PR if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          comment_type: error
          comment_message: |
            tflint failed. Please fix the errors before merging.

      - name: Auto-format Terraform files
        run: terraform fmt -recursive
        working-directory: infrastructure

      - name: Terraform fmt check
        id: fmt_check
        run: |
          terraform fmt -check -recursive
        working-directory: infrastructure

      - name: Comment terraform fmt results if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          comment_type: error
          comment_message: |
            terraform fmt check failed. Please format your code.

      - name: Terraform validate
        id: validate_check
        run: terraform validate
        working-directory: infrastructure

      - name: Comment terraform validate results if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          comment_type: error
          comment_message: |
            terraform validate failed. Please fix the configuration.

      - name: Lint Check Output
        id: lint_check
        run: echo "Lint completed"

  security_scan:
    name: Security Scan (tfsec)
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      security_status: ${{ steps.tfsec_check.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./infrastructure
        
      - name: Check using tfsec and comment Results on PR
        id: tfsec
        uses: tfsec/tfsec-pr-commenter-action@v1.3.1
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          working_directory: infrastructure

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint, security_scan]
    if: ${{ github.event_name == 'pull_request' && needs.lint.result == 'success' && needs.security_scan.result == 'success' }}
    outputs:
      plan_result: ${{ steps.plan_comment.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          role-session-name: terraform-plan

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init EC2
        run: terraform init -input=false
        working-directory: infrastructure/terraform-ec2

      - name: Terraform Plan EC2
        run: terraform plan -no-color -out=tfplan-ec2.binary
        working-directory: infrastructure/terraform-ec2
      - name: Terraform Plan Show EC2
        run: terraform show -no-color tfplan-ec2.binary > plan.txt
        working-directory: infrastructure/terraform-ec2


      - name: Comment EC2 plan on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/terraform-ec2/plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`terraform-ec2\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });


      - name: Terraform Init S3
        run: terraform init -input=false
        working-directory: infrastructure/terraform-s3

      - name: Terraform Plan S3
        run: terraform plan -no-color -out=tfplan-s3.binary
        working-directory: infrastructure/terraform-s3

      - name: Terraform Plan Show S3
        run: terraform show -no-color tfplan-s3.binary > plan-s3.txt
        working-directory: infrastructure/terraform-s3

      - name: Comment S3 Plan on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/terraform-s3/plan-s3.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`terraform-s3\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });

      - name: Upload EC2 and S3 plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plans
          path: |
            infrastructure/terraform-ec2/tfplan-ec2.binary
            infrastructure/terraform-s3/tfplan-s3.binary
      


  build_artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    # needs: plan
    # if: ${{ needs.plan.result == 'success' }}
    #
    # outputs:
    #   new_release_tag: ${{ steps.tag_release.outputs.new_release_tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Zip Terraform Files
        run: |
          zip -r terraform-artifact.zip .
        working-directory: infrastructure
      
      - name: Upload Terraform build Artifact for CI/CD
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifact
          path: infrastructure/terraform-artifact.zip

      # - name: Get latest version
      #   id: latest_version
      #   run: |
      #     branch="${{ github.head_ref || github.ref_name }}"
      #     latest_tag=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "")
      #     echo "latest_version=${latest_tag:-v1.0.0}" >> $GITHUB_OUTPUT

      # - name: Determine version bump
      #   id: calculate_version
      #   run: |
      #     latest_version="${{ steps.latest_version.outputs.latest_version }}"
      #     branch="${{ github.head_ref || github.ref_name }}"
      #     bump_type="patch"

      #       git fetch origin dev || true
      #       git log --pretty=%s origin/dev --grep='Merge pull request' > merge_commits.txt || echo "" > merge_commits.txt
      #       if grep -qE 'from .*/major' merge_commits.txt; then
      #         bump_type="major"
      #       elif grep -qE 'from .*/minor' merge_commits.txt; then
      #         bump_type="minor"
      #       else
      #         bump_type="patch"
      #       fi

      #     if [[ "$latest_version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
      #       major=${BASH_REMATCH[1]}
      #       minor=${BASH_REMATCH[2]}
      #       patch=${BASH_REMATCH[3]}
      #     else
      #       major=1
      #       minor=0
      #       patch=0
      #     fi
          
          
      #     if [[ "$bump_type" == "major" ]]; then
      #       major=$((major + 1)) || { echo "ERROR: Failed to increment major version" >&2; exit 1; }
      #       minor=0
      #       patch=0
      #     elif [[ "$bump_type" == "minor" ]]; then
      #       minor=$((minor + 1)) || { echo "ERROR: Failed to increment minor version" >&2; exit 1; }
      #       patch=0
      #     else
      #       patch=$((patch + 1)) || { echo "ERROR: Failed to increment patch version" >&2; exit 1; }
      #     fi
          
      #     new_version="v${major}.${minor}.${patch}"
          
      #     if ! touch "$GITHUB_OUTPUT" 2>/dev/null; then
      #       echo "ERROR: Cannot write to $GITHUB_OUTPUT" >&2
      #       exit 1
      #     fi
          
      #     echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
      #     echo "bump_type=$bump_type" >> "$GITHUB_OUTPUT"
      #   shell: bash



      #---------------------#

      - name: Get latest version
        id: latest_version
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "latest_version=${latest_tag:-v1.0.0}" >> "$GITHUB_OUTPUT"

      - name: Determine version bump type and calculate next version
        id: calculate_version
        run: |
          latest_version="${{ steps.latest_version.outputs.latest_version }}"
          bump_type="patch"

          if [ -f ".version-bump" ]; then
            bump_type=$(cat .version-bump)
          fi

          if [[ "$latest_version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
          else
            major=1
            minor=0
            patch=0
          fi

          if [[ "$bump_type" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$bump_type" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="v${major}.${minor}.${patch}"
          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
        shell: bash

      #---------------#

      - name: Create GitHub Release and Upload Artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.calculate_version.outputs.new_version }}
          name: Release ${{ steps.calculate_version.outputs.new_version }}
          files: infrastructure/terraform-artifact.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}


        # - name: Create GitHub Release and Tag
        #   id: tag_release
        #   uses: mathieudutour/github-tag-action@v6.2
        #   with:
        #     github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        #     release_branches: main
        #     custom_tag: ${{ steps.calculate_version.outputs.new_version }}
        #     default_bump: patch
        #     default_prerelease_bump: prerelease
        #     create_annotated_tag: false
        #     fetch_all_tags: false
        #     dry_run: false

        # - name: Upload release artifact
        #   uses: actions/upload-release-asset@v1
        #   with:
        #     upload_url: ${{ steps.tag_release.outputs.upload_url }}
        #     asset_path: terraform-artifact.zip
        #     asset_name: terraform-artifact.zip
        #     asset_content_type: application/zip

      - name: Comment new tag on PR
        uses: mshick/add-pr-comment@v1
        env:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          message: "New release tag ${{ steps.calculate_version.outputs.new_version }} created and artifact uploaded."
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: false
