name: Terraform CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  TERRAFORM_VERSION: 1.5.6
  TFLINT_VERSION: v0.48.0
  AWS_REGION: us-east-1

permissions:
  contents: read
  pull-requests: write
  id-token: write
  actions: write

jobs:

  lint:
    name: Lint (terraform fmt, validate, tflint)
    runs-on: ubuntu-latest
    outputs:
      lint_status: ${{ steps.lint_check.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: terraform-lint

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v1
        with:
          version: ${{ env.TFLINT_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infrastructure

      - name: Run tflint
        id: tflint_check
        run: |
          set -e
          tflint --init
          tflint || exit 1
        working-directory: infrastructure

      - name: Comment tflint results on PR if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_type: error
          comment_message: |
            tflint failed. Please fix the errors before merging.

      - name: Terraform fmt check
        id: fmt_check
        run: |
          terraform fmt -check -recursive
        working-directory: infrastructure

      - name: Comment terraform fmt results if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_type: error
          comment_message: |
            terraform fmt check failed. Please format your code.

      - name: Terraform validate
        id: validate_check
        run: terraform validate
        working-directory: infrastructure

      - name: Comment terraform validate results if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_type: error
          comment_message: |
            terraform validate failed. Please fix the configuration.

      - name: Lint Check Output
        id: lint_check
        run: echo "Lint completed"

  security_scan:
    name: Security Scan (tfsec)
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      security_status: ${{ steps.tfsec_check.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: terraform-security-scan

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infrastructure

      - name: Run tfsec scan and comment results on PR
        id: tfsec_check
        uses: aquasecurity/tfsec-pr-commenter-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint, security_scan]
    if: ${{ needs.lint.result == 'success' && needs.security_scan.result == 'success' }}
    outputs:
      plan_result: ${{ steps.plan_comment.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: terraform-plan

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infrastructure

      - name: Terraform Plan
        run: terraform plan -no-color -out=tfplan.binary
        working-directory: infrastructure

      - name: Terraform Plan Show
        run: terraform show -no-color tfplan.binary > plan.txt
        working-directory: infrastructure

      - name: Comment terraform plan on PR
        id: plan_comment
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_type: info
          comment_message_file: plan.txt

      - name: Upload plan artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: tfplan.binary

  build_artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ needs.plan.result == 'success' }}
    outputs:
      new_release_tag: ${{ steps.tag_release.outputs.new_release_tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Zip Terraform Files
        run: |
          zip -r terraform-artifact.zip .
        working-directory: infrastructure

      - name: Get latest git tag
        id: get_latest_tag
        run: |
          echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Calculate new version tag
        id: calculate_version
        run: |
          # Simple semantic version bump example
          latest=${{ steps.get_latest_tag.outputs.latest_tag }}
          if [[ -z "$latest" ]]; then
            echo "new_version=v0.1.0" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor patch <<< "${latest#v}"
            patch=$((patch+1))
            echo "new_version=v${major}.${minor}.${patch}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release and Tag
        id: tag_release
        uses: mathieudutour/github-tag-action@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ""
          release_branches: main
          tag: ${{ steps.calculate_version.outputs.new_version }}

      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.tag_release.outputs.upload_url }}
          asset_path: terraform-artifact.zip
          asset_name: terraform-artifact.zip
          asset_content_type: application/zip

      - name: Comment new tag on PR
        uses: mshick/add-pr-comment@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          body: "New release tag ${{ steps.calculate_version.outputs.new_version }} created and artifact uploaded."
