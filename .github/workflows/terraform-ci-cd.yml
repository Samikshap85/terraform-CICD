name: Terraform CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

env:
  TERRAFORM_VERSION: 1.5.6
  TFLINT_VERSION: v0.48.0
  AWS_REGION: us-east-1

permissions:
  contents: read
  pull-requests: write
  id-token: write
  actions: write

jobs:

  lint:
    name: Lint (terraform fmt, validate, tflint)
    runs-on: ubuntu-latest
    outputs:
      lint_status: ${{ steps.lint_check.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v1
        with:
          version: ${{ env.TFLINT_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infrastructure

      - name: Run tflint
        id: tflint_check
        run: |
          set -e
          tflint --init
          tflint || exit 1
        working-directory: infrastructure

      - name: Comment tflint results on PR if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          comment_type: error
          comment_message: |
            tflint failed. Please fix the errors before merging.

      - name: Auto-format Terraform files
        run: terraform fmt -recursive
        working-directory: infrastructure

      - name: Terraform fmt check
        id: fmt_check
        run: |
          terraform fmt -check -recursive
        working-directory: infrastructure

      - name: Comment terraform fmt results if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          comment_type: error
          comment_message: |
            terraform fmt check failed. Please format your code.

      - name: Terraform validate
        id: validate_check
        run: terraform validate
        working-directory: infrastructure

      - name: Comment terraform validate results if failed
        if: failure()
        uses: GetTerminus/terraform-pr-commenter@v2
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          comment_type: error
          comment_message: |
            terraform validate failed. Please fix the configuration.

      - name: Lint Check Output
        id: lint_check
        run: echo "Lint completed"

  security_scan:
    name: Security Scan (tfsec)
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      security_status: ${{ steps.tfsec_check.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: infrastructure

      - name: Run tfsec scan and comment results on PR
        id: tfsec_check
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [lint, security_scan]
    if: ${{ needs.lint.result == 'success' && needs.security_scan.result == 'success' }}
    outputs:
      plan_result: ${{ steps.plan_comment.outcome }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          role-session-name: terraform-plan

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init EC2
        run: terraform init -input=false
        working-directory: infrastructure/terraform-ec2

      - name: Terraform Plan EC2
        run: terraform plan -no-color -out=tfplan-ec2.binary
        working-directory: infrastructure/terraform-ec2

      - name: Terraform Plan Show EC2
        run: terraform show -no-color tfplan-ec2.binary > plan.txt
        working-directory: infrastructure/terraform-ec2


      - name: Comment EC2 plan on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/terraform-ec2/plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`terraform-ec2\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });


      - name: Terraform Init S3
        run: terraform init -input=false
        working-directory: infrastructure/terraform-s3

      - name: Terraform Plan S3
        run: terraform plan -no-color -out=tfplan-s3.binary
        working-directory: infrastructure/terraform-s3

      - name: Terraform Plan Show S3
        run: terraform show -no-color tfplan-s3.binary > plan-s3.txt
        working-directory: infrastructure/terraform-s3

      - name: Comment S3 Plan on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('infrastructure/terraform-s3/plan-s3.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Output for \`terraform-s3\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });

      - name: Upload EC2 and S3 plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plans
          path: |
            infrastructure/terraform-ec2/tfplan-ec2.binary
            infrastructure/terraform-s3/tfplan-s3.binary

  # build_artifact:
  #   name: Build Artifact
  #   runs-on: ubuntu-latest
  #   needs: plan
  #   if: ${{ needs.plan.result == 'success' }}
  #   outputs:
  #     new_release_tag: ${{ steps.tag_release.outputs.new_release_tag }}
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Zip Terraform Files
  #       run: |
  #         zip -r terraform-artifact.zip .
  #       working-directory: infrastructure

  #     - name: Get latest git tag
  #       id: get_latest_tag
  #       run: |
  #         echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

  #     - name: Calculate new version tag
  #       id: calculate_version
  #       run: |
  #         # Simple semantic version bump example
  #         latest=${{ steps.get_latest_tag.outputs.latest_tag }}
  #         if [[ -z "$latest" ]]; then
  #           echo "new_version=v0.1.0" >> $GITHUB_OUTPUT
  #         else
  #           IFS='.' read -r major minor patch <<< "${latest#v}"
  #           patch=$((patch+1))
  #           echo "new_version=v${major}.${minor}.${patch}" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Create GitHub Release and Upload Artifact
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ steps.calculate_version.outputs.new_version }}
  #         name: Release ${{ steps.calculate_version.outputs.new_version }}
  #         files: infrastructure/terraform-artifact.zip
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}


      # - name: Create GitHub Release and Tag
      #   id: tag_release
      #   uses: mathieudutour/github-tag-action@v6.2
      #   with:
      #     github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      #     release_branches: main
      #     custom_tag: ${{ steps.calculate_version.outputs.new_version }}
      #     default_bump: patch
      #     default_prerelease_bump: prerelease
      #     create_annotated_tag: false
      #     fetch_all_tags: false
      #     dry_run: false

      # - name: Upload release artifact
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.tag_release.outputs.upload_url }}
      #     asset_path: terraform-artifact.zip
      #     asset_name: terraform-artifact.zip
      #     asset_content_type: application/zip

  #     - name: Comment new tag on PR
  #       uses: mshick/add-pr-comment@v1
  #       env:
  #         github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #       with:
  #         message: "New release tag ${{ steps.calculate_version.outputs.new_version }} created and artifact uploaded."
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         allow-repeats: false
