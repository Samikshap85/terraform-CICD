name: Terraform CI/CD Pipeline On Push to Main

on:
  push:
    branches:
      - main

env:
  TERRAFORM_VERSION: 1.5.6
  TFLINT_VERSION: v0.48.0
  AWS_REGION: us-east-1

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:

  build_artifact:
    name: Build Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Zip Terraform Files
        run: |
          zip -r terraform-artifact.zip .
        working-directory: infrastructure
      
      - name: Upload Terraform build Artifact for CI/CD
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifact
          path: infrastructure/terraform-artifact.zip

      # - name: Get latest version
      #   id: latest_version
      #   run: |
      #     git fetch --tags
      #     latest_tag=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
      #     echo "latest_version=${latest_tag:-v1.0.0}" >> "$GITHUB_OUTPUT"

      # - name: calculate next version
      #   id: calculate_version
      #   run: |
      #     latest_version="${{ steps.latest_version.outputs.latest_version }}"
      #     bump_type="patch"

      #     if [ -f ".version-bump" ]; then
      #       bump_type=$(cat .version-bump)
      #     fi

      #     if [[ "$latest_version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
      #       major=${BASH_REMATCH[1]}
      #       minor=${BASH_REMATCH[2]}
      #       patch=${BASH_REMATCH[3]}
      #     else
      #       major=1
      #       minor=0
      #       patch=0
      #     fi

      #     if [[ "$bump_type" == "major" ]]; then
      #       major=$((major + 1))
      #       minor=0
      #       patch=0
      #     elif [[ "$bump_type" == "minor" ]]; then
      #       minor=$((minor + 1))
      #       patch=0
      #     else
      #       patch=$((patch + 1))
      #     fi

      #     new_version="v${major}.${minor}.${patch}"
      #     echo "new_version=$new_version" >> "$GITHUB_OUTPUT"
      #   shell: bash

      - name: Create GitHub Release and Upload Artifact
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.calculate_version.outputs.new_version }}
          name: Release ${{ steps.calculate_version.outputs.new_version }}
          files: infrastructure/terraform-artifact.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # - name: Comment new tag on PR
      #   uses: mshick/add-pr-comment@v1
      #   env:
      #     github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      #   with:
      #     message: "New release tag ${{ steps.calculate_version.outputs.new_version }} created and artifact uploaded."
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     allow-repeats: false
